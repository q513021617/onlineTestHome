##### 1、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？

```
Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。

```
##### 2、JDK和JRE的区别是什么？

```
  Java运行时环境(JRE)。它包括Java虚拟机、Java核心类库和支持文件。它不包含开发工具（JDK）--编译器、调试器和其他工具。 

  Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。 

```
##### 3、”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？

```
“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。

  Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。 

  java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。 

```
##### 4、是否可以在static环境中访问非static变量？

```
static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。

```
##### 5、Java支持的数据类型有哪些？什么是自动拆装箱？

```
Java语言支持的8种基本数据类型是： byte short int long float double boolean char   自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。                Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。自动装箱就是Java编译器在基本数据类型和对应的对象包装类型间的转化，即int转化为Integer,自动拆箱是Integer调用其方法将其转化为int的过程 

```
##### 6、Java中的方法覆盖(Overriding)和方法重载(Overload)是什么意思？

```
Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。

```
##### 7、Java中，什么是构造方法？什么是构造方法重载？什么是复制构造方法？

```
当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。 Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。 Java不支持像C++中那样的复制构造方法，这个不同点是因为如果你不自己写构造方法的情况下，Java不会创建默认的复制构造方法。

```
##### 8、Java支持多继承么？

```
Java中类不支持多继承，只支持单继承（即一个类只有一个父类）。 但是java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。

```
##### 9、接口和抽象类的区别是什么？

```
Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于： 接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。 类可以实现很多个接口，但是只能继承一个抽象类 类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。 抽象类可以在不提供接口方法实现的情况下实现接口。 Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。 Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。 接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。 也可以参考JDK8中抽象类和接口的区别

```
##### 10、什么是值传递和引用传递？

```
  值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.     引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。     一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递    

```
##### 11、进程和线程的区别是什么？

```
  进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。       线程与进程的区别归纳：        a.地址空间和其它资源：进程间相互独立，同一进程的各线程间共享。某进程内的线程在其它进程不可见。       b.通信：进程间通信IPC，线程间可以直接读写进程数据段（如全局变量）来进行通信――需要进程同步和互斥手段的辅助，以保证数据的一致性。       c.调度和切换：线程上下文切换比进程上下文切换要快得多。       d.在多线程OS中，进程不是一个可执行的实体。    

```
##### 12、创建线程有几种不同的方式？你喜欢哪一种？为什么？

```
有4种方式可以用来创建线程：
 继承Thread类
 实现Runnable接口
 应用程序可以使用Executor框架来创建线程池

  实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。 

  还有一种方式是实现Callable接口


```
